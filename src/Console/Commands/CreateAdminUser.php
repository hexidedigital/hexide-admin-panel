<?php

namespace HexideDigital\HexideAdmin\Console\Commands;

use App\Models\Role;
use App\Models\User;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;

class CreateAdminUser extends BaseCommand
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $name = 'admin:user';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create new user with admin roles';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $email_exists = true;
        $first = $this->option('email');
        while ($email_exists) {
            if($first){
                $email = $this->option('email');
                $first = false;
            }else{
                $email = $this->ask('Enter email', $this->option('email') ?? 'admin@admin.com');
            }

            $email_exists = User::where('email', $email)->get()->isNotEmpty();
            if ($email_exists) {
                $this->warn('Email exists, enter another.');

            } elseif (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
                $email_exists = true;
                $this->warn('Email invalid.');
            }
            if($this->option('no-interaction') && $email_exists){
                return self::FAILURE;
            }
        }

        $name = $this->option('name');
        if (!empty($name)) {
            $name = $this->ask('Enter name', \Arr::first(explode('@', $email)));
        }else{
            $name = \Arr::first(explode('@', $email));
        }

        $incorrect = !$this->option('generate');
        $generate = $this->option('generate');
        $password = null;
        while ($incorrect) {
            $password = $this->option('password') ?? $this->secret('Enter password (length 4-20 chars, but if empty will be autogenerated)');

            $generate = empty($password);
            if (!$generate) {
                $length_correct = 4 <= strlen($password) && strlen($password) <= 20;
                if ($length_correct) {
                    $confirm_password = $this->option('password') ?? $this->secret('Confirm password');

                    $incorrect = $confirm_password !== $password;
                    if ($incorrect) {
                        $this->warn('Invalid confirm password');
                    }
                } else {
                    $this->warn('invalid password length');
                }
            }
        }

        if ($generate) {
            $password = \Str::random(12);
        }

        $user = User::make([
            'name' => $name,
            'email' => $email,
            'password' => \Hash::make($password),
        ]);
        if (in_array('is_system', $user->getFillable())) $user->is_system = $email === 'admin@admin.com';
        $user->save();

        $role = Role::firstWhere('key', 'admin');
        $user->roles()->attach($role);

        $this->info('New admin user created');
        $this->table(
            ['field', 'value'],
            [
                ['name', $name],
                ['email', $email],
                ['password', $generate ? $password : '********'],
                ['url', route('admin.home')],
            ]
        );

        return self::SUCCESS;
    }

    protected function getOptions(): array
    {
        return [
            ['email', 'e', InputOption::VALUE_OPTIONAL, 'Set email'],
            ['name', null, InputOption::VALUE_OPTIONAL, 'Set name'],
            ['password', null, InputOption::VALUE_OPTIONAL, 'Set password'],
            ['generate', 'P', InputOption::VALUE_NONE, 'Autogenerate password'],
        ];
    }
}
